require("hardhat-deploy")
require("hardhat-deploy-ethers")

const { ethers } = require("hardhat")
const { networkConfig } = require("../helper-hardhat-config")

const util = require("util");
const request = util.promisify(require("request"));

const private_key = network.config.accounts[0]
const wallet = new ethers.Wallet(private_key, ethers.provider)
async function callRpc(method, params) {
    var options = {
        method: "POST",
        url: "https://api.hyperspace.node.glif.io/rpc/v1",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify({
            jsonrpc: "2.0",
            method: method,
            params: params,
            id: 1,
        }),
    }
    const res = await request(options)
    return JSON.parse(res.body).result
}


/** Collect an airdrop by proving a proof that user is over 18 yo */
async function main() {
    const priorityFee = await callRpc("eth_maxPriorityFeePerGas");
    //let singers = await hre.ethers.getSigners();
    let collector = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266"

    let verifier_ADDR = "0xc0F115A19107322cFBf1cDBC7ea011C19EbDB4F8"; // to add

    // A[2] B[[2][2]] C[2] represent the proof
    let a = ["0x2d5bc4c15ff9c693cf4dcf0053662f4696b8437ff3d4963a1a57d41650756db8", "0x03b3b0bd9df132d6e7aee5d713b4f35c99f628149d5c7a7f2a8a38521233b69e"]
    let b = [["0x0b98f8037fef899cd8dbc878c4c85fc7e0ab114bf1a3c520fd2a2ec70ab9649a", "0x04afe1c2c6d232839035757168199bf21b298035f52cbf73e51eb19b8bb6800d"], ["0x262ce5b9479e4aa80de3df4419c232f28655d97c87a3a33cdc09fd00c5118067", "0x15bfa8a13818ae21e933b8fa7e18da4351cfc3b079c81b55a8d01b60e55fa20a"]]
    let c = ["0x126c3df2fae64753b54f07081031331b8704afe80604893a24565e42b520c761", "0x267a23321295486fac537ab434f0c1e07edea50f2bbd033b75471e5ba9801a6a"]
    // input[73] represents the public input of the circuit
    let input = ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x15c083b836ce1ca2dab708fd6d18e760354073a5ca6f6373450f937ac98aeab5", "0x05f0d9c162ad5420854a0e388051276bceabb3e2e4d3b7db388b85714d715318", "0x04c7311087b0d8c6f2d18114ac43d754ef8a19877767d3ff97af96192b369568", "0x152f5044240ef872cf7e6742fe202b9e07ed6188e9e734c09b06939704852358", "0x2865441cd3e276643c84e55004ad259dff282c8c47c6e8c151afacdadf6f6db3", "0x0000000000000000000000000000000087b9b4c689c2024c54d1bf962cb16bce", "0x0000000000000000000000000000000000000000000000000000000000000002", "0x0000000000000000000000000000000000000000000000000000000000000003", "0x0000000000000000000000000000000000000000000000000000000000000012", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000", "0x0000000000000000000000000000000000000000000000000000000000000000"]
    let tokenID = "1"; // to add

    let Verifier = await ethers.getContractFactory("Verifier", wallet);
    let verifier = await Verifier.attach(verifier_ADDR)

    // await verifier.connect(collector).verifyProof(a, b, c, input).then(tx => tx.wait());
    const verificationResult = await verifier.verifyProof(a, b, c, input, {
        gasLimit: 10000000000,
        maxPriorityFeePerGas: priorityFee
    });
    console.log("verification result: ", verificationResult);
    console.log(`Proof verified`)


}

main().then(() => process.exit(0))
    .catch(e => {
        console.error(e);
        process.exit(-1);
    })



